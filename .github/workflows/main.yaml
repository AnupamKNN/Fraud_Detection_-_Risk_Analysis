name: Fraud Detection CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  pull_data:
    name: üì¶ Pull Data & Artifacts from DVC
    runs-on: ubuntu-latest
    env:
      DVC_REMOTE_URL: ${{ secrets.DVC_REMOTE_URL }}
      DVC_REMOTE_USER: ${{ secrets.DVC_REMOTE_USER }}
      DVC_REMOTE_PASSWORD: ${{ secrets.DVC_REMOTE_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Configure & Pull from DVC
        run: |
          dvc remote add origin $DVC_REMOTE_URL || echo "Remote exists"
          dvc remote modify origin auth basic
          dvc remote modify origin user $DVC_REMOTE_USER --local
          dvc remote modify origin password $DVC_REMOTE_PASSWORD --local
          dvc pull

  train_model:
    name: ü§ñ Train Model with MLflow
    runs-on: ubuntu-latest
    needs: pull_data
    env:
      MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run training pipeline
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          python src/fraud_detection/pipeline/training_pipeline.py

  push_artifacts:
    name: üì§ Push Updated Artifacts to DVC
    runs-on: ubuntu-latest
    needs: train_model
    env:
      DVC_REMOTE_URL: ${{ secrets.DVC_REMOTE_URL }}
      DVC_REMOTE_USER: ${{ secrets.DVC_REMOTE_USER }}
      DVC_REMOTE_PASSWORD: ${{ secrets.DVC_REMOTE_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Push Artifacts
        run: |
          dvc remote modify origin auth basic
          dvc remote modify origin user $DVC_REMOTE_USER --local
          dvc remote modify origin password $DVC_REMOTE_PASSWORD --local
          dvc add Artifacts/data_transformation/preprocessor.pkl
          dvc add Artifacts/data_ingestion/features_store/creditcard.csv
          dvc push
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"
          git add *.dvc .gitignore
          git commit -m "Update artifacts via CI" || echo "No changes to commit"
          git push

  build_image:
    name: üê≥ Build & Push to GHCR (Optional for local debug)
    runs-on: ubuntu-latest
    needs: push_artifacts
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/anupamknn/fraud_detection_-_risk_analysis:latest

  deploy:
    name: üöÄ Deploy to Environment
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      - name: Deployment Placeholder
        run: echo "Deploying to environment (K8s, ECS, etc.)..."

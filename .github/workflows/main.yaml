name: Fraud Detection Model Training & Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  train-model:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Export DVC credentials
        run: |
          echo "DVC_REMOTE_URL=${{ secrets.DVC_REMOTE_URL }}" >> $GITHUB_ENV
          echo "DVC_REMOTE_USER=${{ secrets.DVC_REMOTE_USER }}" >> $GITHUB_ENV
          echo "DVC_REMOTE_PASSWORD=${{ secrets.DVC_REMOTE_PASSWORD }}" >> $GITHUB_ENV

      - name: Set up DVC
        uses: iterative/setup-dvc@v1

      - name: Pull data and artifacts from DVC
        run: |
          dvc remote add origin $DVC_REMOTE_URL || echo "Remote exists"
          dvc remote modify origin auth basic
          dvc remote modify origin user $DVC_REMOTE_USER --local
          dvc remote modify origin password $DVC_REMOTE_PASSWORD --local
          dvc pull

      - name: Export MLflow credentials
        run: |
          echo "MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }}" >> $GITHUB_ENV

      - name: Run training pipeline
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          python src/fraud_detection/pipeline/training_pipeline.py

      - name: Push updated artifacts to DVC
        run: |
          dvc remote modify origin auth basic
          dvc remote modify origin user $DVC_REMOTE_USER --local
          dvc remote modify origin password $DVC_REMOTE_PASSWORD --local
          dvc add Artifacts/data_transformation/preprocessor.pkl
          dvc add Artifacts/data_ingestion/features_store/creditcard.csv
          dvc push
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions[bot]"
          git add *.dvc .gitignore
          git commit -m "Update artifacts via CI" || echo "No changes to commit"
          git push

  build-and-push:
    runs-on: ubuntu-latest
    needs: train-model

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/anupamknn/fraud_detection_risk_analysis:latest

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deployment Placeholder
        run: echo "Deploying to environment (K8s, ECS, etc.)..."
